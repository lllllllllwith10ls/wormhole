This story begins with a school trip to another dimension.  My elementary school's librarian owned a house and campground in far northern California, and as part of an outdoor education program our class spent a week there.  The house had its own library, and there I found a book that I kept returning to over and over throughout the week, until the librarian suggested that I take it home to keep.

That book was "The Fourth Dimension" by Rudy Rucker, illustrated by David Povilaitis.  By way of introducing the idea of higher dimensions, it features quotes and illustrations from an imagined sequel to "Flatland".  One chapter in particular discusses how a 2-dimensional space can be warped or curved, either by bending it into a third dimension or by unevenly stretching or shrinking it.  One set of illustrations in this chapter especially captured my imagination: wormholes.

https://www.rudyrucker.com/blog/2013/03/30/four-dimensional-portals-to-other-worlds/

Years later, as a graduate student in computer science, and still inspired by those illustrations, I had the idea to create a game set on a curved 2-dimensional surface -- in fact, on a broad class of 2-dimensional surfaces.  The natural way to do this with today's graphics technology is to embed the surface in R^3, cover it with a mesh of triangles, and use a 3D game engine.  However, many interesting 2D surfaces can't be smoothly embedded in R^3.

Another possibility is to represent a surface as a mesh of triangles without any shared coordinate system -- each triangle would know the length of its edges and the identity of its neighboring triangles, and each would have its own coordinate system.  The triangles could then be "glued" together.  The tricky part here is that, if we just glue together triangles, all the curvature (if there is any) is concentrated at the vertices of the mesh, so the surface is not smooth.  We can correct this by  defining a metric that distributes the curvature over the interior of each triangle, but then straight lines in the triangle's coordinate system may no longer be geodesics on the surface, and it becomes difficult to calculate the paths of moving game objects, or to unwrap the surface onto the screen for display in a way that changes continuously as the "camera" moves from triangle to triangle.  I spent a long time trying to work out the math for this and kept running into dead ends.

Let's try a different approach, inspired by one of the illustrations in "The Fourth Dimension".  The wormhole appears as a disc, with the plane on the other side appearing "inside-out" in this dics's interior with infinity in the center.  There is a well-defined transformation of the plane that does exactly this -- it's called a circle inversion, and has the form r -> R^2/r, where R is the radius of the wormhole.

More generally, if we're going to be gluing togther multiple regions with different coordinate systems, we'll need to define how one region looks when viewed from another region, looking across the boundary -- in other words, we need a family of coordinate transformations.  This family should include all the rigid motions, so we can represent moving the camera around on a single plane, and it should also include circle inversions, so we can represent viewing another plane through a wormhole and have it look like that illustration.  Since we're going to be using these transformations to draw graphics, we'd like them to compose nicely, and be representable as a data structure that doesn't grow and grow as we compose them.

Handily, just such a family of transformations exists: the Möbius transformations.  These are the first-degree rational functions on the complex plane, (ax + b) / (cx + d), and they can be represented as 2x2 matrices of complex numbers (with determinant 1), with matrix multiplication equivalent to composition of the functions.  These transformations form a group.

Consider the surface obtained by cutting a disc out of each of two planes, and gluing together the exteriors by associating points in the second plane with points in the interior of the disc cut out of the first, using circle inversion.  Imagine a small but not infinitesimal circular bug crawling around on this surface, as viewed in the coordinate system local to the first plane.  When it is in the exterior of the wormhole, its size and shape do not change as it moves around.  However, when it is on the other side of the wormhole (which is also an exterior!), it appears to shrink towards the center of the disc as it gets further away.  It also appears tilted, with the side of the bug closer to the wormhole appearing larger than the side further away.  This is because circle inversion takes circles to circles, but it does not take the center of the old circle to the center of the new one.  At the edge of the wormhole, the two planes agree about how large the bug should appear, but they don't agree about how much it should be tilted in this sense.  If we draw the bug according to the coordinate system of the plane in which its center lies, it will tilt discontinuously as its center crosses the edge of the wormhole.  This means that the surface defined in this way is not smooth.

In order to solve this problem and get a smooth surface, we explicitly introduce the idea of a metric.  Since all the transformations we will be using are complex analytic, they are conformal, preserving angles and taking small circles to small circles (not ellipses).  This means we can limit ourselves to conformal metrics -- since the metric is the same in all directions, we don't need to associate a 2x2 innner product matrix with each point of the plane, we just need a single positive real number at each point, |ds/dx|, and we need to understand how this number changes when we change coordinate systems.  If y = f(x), then ds/dy = (ds/dx) * (dx/dy) = (ds/dx) / (dy/dx) = (ds/dx) / f'(x).

Let's see what this does to the metric on our two planes.  On the plane whose coordinate system we are looking at, the metric is identically 1 everywhere, so on the inverted plane, the metric should be |1/f'(x)| = R^2/r^2.  We can see that the metrics agree when r = R -- however, the gradients of the metrics do not agree!  (Since the metric is a real-valued function of a complex input, it doesn't have a derivative in the sense of complex analysis, so we'll call its rate of change a gradient.)  It is this mismatch in the gradients of the metrics that causes the mismatch in tilt.  We need to somehow find a compromise metric that interpolates smoothly between them.  When we are far from the wormhole, the metric should closely approximate the flat metric of the plane on that side of the wormhole, which happens to be whichever of the contributing metrics is larger.

If our two metrics are u and v, the Pythagorean sum sqrt(u^2 + v^2) has this property.  It also has the property that areas are additive -- dA = ds^2 = (u^2 + v^2)dx^2.  In effect, we have not cut out and thrown away the interiors of the discs from each plane, but rather taken the area of each disc and spread it out into the plane on the other side, with most of it ending up in the region close to the wormhole.  We also get a very nice embedding of the resulting surface in R^4, as the graph of x + yi = 1/(w + zi), making it in some sense a hyperboloid.  (This surface can also be embedded in R^3, but not as nicely.)  We can also explicitly calculate the gradient of the combined metric at any point.

What do we do with this new metric?  We need to be able to draw the bug as it approaches and then crosses the edge of the wormhole.  To do this, we'll assume that the image of the bug is always the image of the unit disc under some Möbius transformation M.  We just need to find the M that takes 0 to wherever the center of the bug is, and gives the right value for the metric and its gradient.  This always exists and is unique (up to rotation).  This allows us to draw the bug and watch its apparent size and tilt change continuously as it passes through the wormhole.  Even better, by applying the inverse transform M^-1 to the whole field of view, we can attach the camera to the bug and watch the world turn inside out, continuously.

We were able to construct a working model of our surface without finding an explicit embedding for it in R^3, however there is another 3-dimensional space in which we did find an explicit embedding -- the space of (z, m) in (C x R+) where m is the value of the metric at z.  This space is a bit odd when considered as a metric space, because it has the metric ds = m*dz, so there is no contribution to the metric from dm, points with the same z but different m have a distance of zero, and in fact all points (x, m) and (y, n) are an arbitrarily small distance apart because they can be connected via (x, e) and (y, e) for arbitrarily small e.  However, if we restrict ourselves to surfaces where m is some smooth function of z, we get all our interesting metric properties back.  This also gives a new interpretation for what we were doing when we found the unique M that takes 0 to x and has a given value for the metric and its gradient at that point -- we were finding, in C x R+, the tangent plane to our surface at that point.

Tracking moving game objects as flat discs that are tangent to the surface at their centers makes them easy to draw, and also easy to animate.  To animate a game object moving a short distance in what from its point of view is a straight line, we simply apply a translation to it in its current tangent plane, by composing its transformation M with one representing a simple translation, T, on the right: M*T.  Then we use the metric to apply a correction to the result so that it is once again tangent to the surface at its new center.  This gets us parallel transport along geodesics with no additional effort!

However, there is one drawback to game objects being embedded in tangent planes rather than directly in the surface.  Consider a moving object that is much larger than the wormhole.  As it approaches the wormhole, its edge will occlude the center of the wormhole before its center gets close enough to feel the effects of the wormhole and begin to tilt into it.  But the "center" of the wormhole is at infinity in the plane on the other side -- our object now "covers" the whole plane on the other side of the wormhole!  We really shouldn't allow this to happen.  In order to prevent it, we'll need to pick a characteristic scale s for our game, and promise that all rigid moving objects will be no larger than s, all curvature features of our surface will have a radius no smaller than s, and no object will move further than s in one frame of animation.

We've got our two planes connected by a wormhole.  What about other surfaces?  There are a few other things we might want to be able to do.

First, a wormhole might not lead to a whole other plane -- it might connect two regions of the same plane, or a sequence of multiple wormholes might lead back to the same region eventually.  We can model this using the same tools already developed, with one addition: there are now multiple images of the same point, and a nontrivial group of Möbius transformations that takes each image to each of the others.  Our surface is actually the quotient obtained by modding out by this group.  To render it, each time we see the wormhole we'll need to recursively draw the other side, until we reach some limit (in practice the wormholes quickly shrink to sub-pixel sizes).  We'll also need to take multiple wormholes into account when calculating the metric and its gradient.

Second, even before adding wormholes, we might want to start with regions that have some intrinsic curvature.  Both the sphere and the hyperbolic plane can be represented by applying a metric to the complex plane.  In fact, both of these metrics can be obtained by a small modification of the procedure we used to generate the metric for our original wormhole.

We begin with the sphere, and we'll generate it by gluing together two discs.  When we generated our wormhole, we cut out a disc from each of two planes, one inside-out to the other, and glued together the two exteriors, by combining their metrics in a way that approximated whichever was larger.  What if we take two planes, one inside-out to the other, and combine their metrics in a way that approximates whichever is smaller?  Then we'd be gluing together the (smaller) interiors of the discs.  The function 1/(1/u + 1/v) has this property, and since u is 1 and v is R^2/r^2, this is 1/(1 + r^2/R^2) which is exactly the familiar metric of the Riemann sphere.

This harmonic sum and the Pythagorean sum we used for the original wormhole are both in a family of functions S_n(u,v) = (u^n + v^n)^(1/n) which have some nice properties: they are commutative, associative, and while not linear in their inputs, they are scalable in the sense that S_n(k*u,k*v) = k*S_n(u,v) -- and, if T is a transformation, T(S_n(u,v)) = S_n(T(u),T(v)).  This allows us to add any number of metrics and get a result that behaves nicely both before and after applying a coordinate transformation.

What about the hyperbolic plane?  This has a representation in the complex plane as the Poincare disc.  Near the rim of the disc the metric goes to infinity -- in fact, it's 1/(1 - r^2/R^2).  If the sphere was a harmonic sum, this is a harmonic difference.  If we take the absolute value, we get an equivalent metric on the exterior of the disc, effectively a second hyperbolic plane facing the other way (we might even think of it as the "other side" of the Poincare disc) for free.  If the original wormhole between two planes was analogous to a hyperboloid of one sheet, this pair of twinned hyperbolic planes might be a hyperboloid of two sheets.

Finally, what about non-orientable surfaces?  We can get these by extending the group of Möbius transformations to include their complex conjugates -- we just need to add an extra bit to the matrix representation to indicate this.  This will allow us to cut out two discs and glue them together so that objects passing through the wormhole come out the other side with their orientation reversed.  In fact, we can glue a wormhole to itself by associating opposite points on the cut edge (this is the unique way to glue a wormhole to itself without gluing any point to itself).  The region around the glued edge becomes a Möbius strip!  Trying to embed such a surface in R^3 results in a self-intersecting structure called a cross-cap.

Another thing we might like to have is wormholes that grow, shrink, move, or rotate over time.  This presents some serious difficulties.  If a wormhole is moving, the metrics on either side may now disagree not only about how large and how tilted objects should appear, but also about whether they are moving or stationary.  This will require adding a time derivative component to every term of every calculation we have done so far -- surely this is possible, but I haven't begun to attempt it.  One of the effects we might most like to show is a wormhole appearing from nothing, by starting with an infinitesimal radius and growing, but this would violate our promise that all curvature features will be larger than the characteristic scale s.